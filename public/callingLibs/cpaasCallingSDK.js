var ne=Object.defineProperty;var se=(a,e,t)=>e in a?ne(a,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[e]=t;var n=(a,e,t)=>(se(a,typeof e!="symbol"?e+"":e,t),t);var E="0.1.0";var ge=navigator.userAgentData;function J(){return window.crypto.getRandomValues(new Uint32Array(1))[0]/4294967295}function f(){return"noop"}function u(a){return typeof a=="function"}var c=(a,e,t)=>({ok:!1,statusText:a,status:e||4e3,error:t}),X=()=>({ok:!0,statusText:"success",status:200});function V(){let a=new Date().getTime();return window.performance&&u(window.performance.now)&&(a+=performance.now()),"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){let i=(a+J()*16)%16|0;return a=Math.floor(a/16),(t==="x"?i:i&3|8).toString(16)})}function C(a){if(typeof a=="string")return a;let e="";return a.message?e=a.message:a.statusText&&(e=a.statusText,a.error&&a.error.message&&(e+=` :: ${a.error.message}`)),e}function N(a){if(!a||typeof a!="string")return;let e=a.lastIndexOf("/");return e===-1?a:a.substring(e+1)}var K=["+1112","+112","+1911","+1912","+911","+912","00112","00911","00912","0112","0911","0912","1112","112","1911","1912","911","912","922"];var Z=(a,e)=>a.replace(e,"");var Y=a=>!!K.find(e=>e===a);var re=a=>a.split("").map(e=>{switch(e.toLowerCase()){case"a":case"b":case"c":e="2";break;case"d":case"e":case"f":e="3";break;case"g":case"h":case"i":e="4";break;case"j":case"k":case"l":e="5";break;case"m":case"n":case"o":e="6";break;case"p":case"q":case"r":case"s":e="7";break;case"t":case"u":case"v":e="8";break;case"w":case"x":case"y":case"z":e="9";break}return e}).join(""),Q=a=>a?a.replace(/[^\d\+,#\*]/g,""):"",B=a=>a?Q(a).replace(/[^\d]/g,""):"";var j=a=>{if(!a)return a;let e;return/^((tel|ext|sip|mailto):)?[^a-z]*$/i.test(a)&&(e=Q(a)),e||e===""?e.length===11&&e.startsWith("1")?e.slice(1):e.length===12&&e.startsWith("+1")?e.slice(2):e:a.replace(/^(mailto|sip):/,"")},y=(a,e)=>{let t=B(j(a)),i=t.match(/^(\+?1)?(\d{10})$/),s="";if(i){let r=i[2]||i[0];e?s="+1"+r:s="1"+r}else{t.startsWith("011")&&(t=t.substr(3));let r=t.match(/^(\+?)?(\d{11,15})$/);r?s="+"+(r[2]||r[0]):s=B(t).substr(0,20)}return s},S=a=>{if(a){a.match(/^sip:(\+?\d+)@.+;user=phone/)?a=a.match(/^sip:(\+?\d+)@.+;user=phone/)[1]:a.match(/^sip:(\+\d{11})@.+/)?a=a.match(/^sip:(\+\d{11})@.+/)[1]:a=j(a);let e=a.replace(/[^\d\+,#\*]/g,""),t=e.match(/^(\+?1)?(\d{10})$/),i=e.match(/^(\+?)?(\d{11,15})$/);if(t&&t[2])a="+1"+t[2];else if(i&&i[2])a="+"+i[2];else if(/[a-z]/i.test(a)&&a.indexOf("@")===-1&&a!=="anonymous"){let r=re(a);e=S(r),e.length>0&&(a=e)}else if(/\d/.test(a)&&/^[\d\-\(\)\+#,\s]+$/.test(a))a=a.replace(/[^\d\+,#]/g,"");else if(a.startsWith("sip:")&&a.indexOf("@")!==-1)a.substring(4,a.indexOf("@"))?a.includes("stgsip.t-mobile.com")?a=a.substring(4,a.indexOf("@")):a=a.replace("sip:",""):a=a.substring(4,a.indexOf("@"));else if(a.startsWith("uid:"))if(a.match(/uid:(.*)@/).length===2){let r=a.match(/uid:(.*)@/)[1];r.match(/^[A-Z]/i)?a=a.replace("uid:",""):a=r}else a=a.replace("uid:","");let s=a.match(/(^[+]?[\d]*)@.+/);s&&s.length===2&&(a=a.match(/(^[+]?[\d]*)@.+/)[1])}else console.warn("parseMsisdn: input is not a string. MSISDN: ",a);return a};var G=a=>{if(!a)return a;let e=a.split("@")[0];return e==="sip:anonymous"||e==="anonymous"?"anonymous":(e=e.split(";")[0],y(B(e)))};var T=class{constructor(){n(this,"logLevel");n(this,"setLogLevel",e=>{this.logLevel=e});n(this,"getLogLevel",()=>this.logLevel)}static getInstance(){return T.instance||(T.instance=new T),T.instance}},D=T;n(D,"instance");var b=class{constructor(e){n(this,"label");n(this,"configInst");n(this,"log",(...e)=>{if(this.configInst.getLogLevel()<=1){let t=new Date().toISOString();console.log(t,this.label,...e)}});n(this,"logRemote",(e,...t)=>{this.log(e,t)});n(this,"debug",(...e)=>{if(this.configInst.getLogLevel()<=0){let t=new Date().toISOString();console.debug(t,this.label,...e)}});n(this,"info",(...e)=>{if(this.configInst.getLogLevel()<=2){let t=new Date().toISOString();console.info(t,this.label,...e)}});n(this,"warn",(...e)=>{if(this.configInst.getLogLevel()<=3){let t=new Date().toISOString();console.warn(t,this.label,...e)}});n(this,"error",(...e)=>{if(this.configInst.getLogLevel()<=4){let t=new Date().toISOString();console.error(t,this.label,...e)}});n(this,"fatal",(...e)=>{if(this.configInst.getLogLevel()<=5){let t=new Date().toISOString();console.error(t,"FATAL:",this.label,...e)}});n(this,"trace",(...e)=>{if(this.configInst.getLogLevel()<=0){let t=new Date().toISOString();console.trace(t,this.label,...e)}});this.label=e,this.configInst=D.getInstance()}};var M=class{constructor(e){n(this,"audioElements",{});n(this,"logger");n(this,"okToPlay");n(this,"trueEnd",e=>()=>{let t=!0;Object.keys(this.audioElements).forEach(i=>{i.startsWith("dtmf-")&&!this.audioElements[i].paused&&(t=!1)}),t&&u(e)&&e()});n(this,"startTone",(e,t,i,s=.5,r=!0,o)=>{let l=this.audioElements[e];if(l&&!l.paused)return Promise.reject(`start ${e}: audioElement already playing`);if(!t)return Promise.reject(`${e} tone URL not specified`);l||(l=this.audioElements[e]=new Audio(t)),l.loop=r,l.muted=!1,l.volume=s,l.currentTime=0;let d=Promise.resolve();if(i){this.logger.log(`trying to use ringback Speakers: ${i}`);let p=l.setSinkId;if(u(p))d=p(i).catch(h=>(this.logger.info("setSinkId rejected: ",i,h),Promise.resolve()));else{let h="setSinkId not defined on audioElement";this.logger.warn(h)}}let g=()=>this.okToPlay?(this.logger.info(`Play ${t}[${s}] ${i?"on "+i:""}`),o&&(l.onended=this.trueEnd(o),l.onabort=this.trueEnd(o),l.onerror=this.trueEnd(o)),l.play()):Promise.resolve();return this.okToPlay=!0,d.then(g)});n(this,"stopTone",e=>{let t=this.audioElements[e];t&&!t.paused&&(t.pause(),this.logger.log(`Paused ${e} Audio Element`)),this.okToPlay=!1});this.logger=e}};var ee=a=>{switch(a){case"#":return"pound";case"*":return"asterisk";default:return a}},F=class{constructor(e){n(this,"deviceId");n(this,"groupId");n(this,"label");n(this,"kind");e&&(this.deviceId=e.deviceId,this.label=e.label,this.kind=e.kind,this.groupId=e.groupId)}toString(){return this.kind+"->"+this.label+" ["+this.deviceId+"]"}},H=class{constructor(e){n(this,"cfg");n(this,"filter",e=>this.cfg===void 0||(!this.cfg.state||e.getState()===this.cfg.state)&&(!this.cfg.direction||e.getDirection()===this.cfg.direction));f(),this.cfg=e}},I=H;n(I,"fromConfig",e=>e instanceof H?e:new H(e));var x=100,z=0;var U=class{constructor(e){n(this,"subscriptionEvents",{});n(this,"logger");n(this,"subscribe",(e,t,i)=>{let s=e.toString();if(!s)return this.logger.warn("subscribe must include the event name parameter"),-1;if(typeof t!="function")return this.logger.warn("subscribe event callback parameter must be a function"),-2;if(!i)return this.logger.warn("subscribe must include the event identifier parameter"),-3;let r=this.subscriptionEvents[s];return r||(this.subscriptionEvents[s]=[],r=this.subscriptionEvents[s]),this.unsubscribe(e,i),r.push({callback:t,identifier:i}),0});n(this,"unsubscribe",(e,t)=>{let i=e.toString(),s=this.subscriptionEvents[i];if(!s)return-1;let r=s.findIndex(o=>o.identifier===t);return r<0?-2:(s.splice(r,1),this.subscriptionEvents[i]=s,0)});n(this,"publish",(e,...t)=>{let i=e.toString(),s=this.subscriptionEvents[i];return s?(s.forEach(r=>{typeof r.callback=="function"?window.setTimeout(()=>r.callback(...t),0):this.logger.warn("Subscriber callback is not a function.  eventName:",i,"subscriber:",r.identifier)}),0):-1});this.logger=e}};var $=class{constructor(e,t,i,s){n(this,"clientIP");n(this,"hasIncomingVideo",!1);n(this,"hasOutgoingVideo",!1);n(this,"incomingMediaStream");n(this,"invitationOfferSDP");n(this,"isCallTransfer",!1);n(this,"isIPV6",!1);n(this,"isMuted",!1);n(this,"isOfferer",!1);n(this,"isPaused",!1);n(this,"hasGatheredSdp",!1);n(this,"isSharing",!1);n(this,"localCandidates",[]);n(this,"localVideoCandidates",[]);n(this,"logger");n(this,"onIceCandidateSdp");n(this,"outgoingMediaStream");n(this,"callId");n(this,"iceServers");n(this,"peerConnection");n(this,"savedLocalDescription");n(this,"savedRemoteDescription");n(this,"signaler");n(this,"status","Connected");n(this,"initiateOfferProcess",async e=>{try{e&&(this.outgoingMediaStream=e,this.setOutgoingTracksFromStream(e,this.hasOutgoingVideo),this.signaler.onLocalStream(this.callId,this.outgoingMediaStream,this.hasOutgoingVideo)),this.isOfferer=!0;let t=await this.peerConnection.createOffer();return await this.doSetLocalDescription(t,!0)}catch(t){return this.logger.error("initiateOfferProcess Error: ",C(t)),Promise.reject(t)}});n(this,"createOfferWithDeviceList",async e=>{let t=await this.getSelectedMediaStream(e);return await this.initiateOfferProcess(t)});n(this,"acceptIncomingCallInvitation",(e,t=!1,i=!1)=>{try{if(this.isCallTransfer)return this.createOfferWithDeviceList(e);{let s=!t,r=i&&!s;return this.status="Connected",this.createAnswerForAccept(this.invitationOfferSDP,e,s,r)}}catch(s){return this.logger.error("onIceCandidateCollectionComplete Error: ",C(s)),this.closePeerConnections(),Promise.reject(s)}});n(this,"toggleCallMute",e=>{let t=this.findSender("audio");return t?(t.track.enabled=!e,this.isMuted=e,!0):!1});n(this,"toggleCallVideoPaused",e=>{let t=this.findSender("video");t&&(t.track.enabled=!e),this.isPaused=e});n(this,"closePeerConnections",()=>{this.outgoingMediaStream&&(this.stopMedia(this.outgoingMediaStream),this.outgoingMediaStream=void 0),this.incomingMediaStream&&(this.stopMedia(this.incomingMediaStream),this.incomingMediaStream=void 0),this.peerConnection.signalingState!=="closed"&&this.peerConnection.close()});n(this,"getOutgoingMediaStream",()=>this.outgoingMediaStream);n(this,"getIncomingMediaStream",()=>this.incomingMediaStream);n(this,"setRemoteSessionDescriptionFromSdp",async(e,t)=>{if(this.isCallStillActive()){this.isOfferer=t;let i=this.parseSdpForRemoteSessionDesc(e);this.savedRemoteDescription=i,this.logger.log("setRemoteDescription: ",i.type,`
`,i.sdp),await this.peerConnection.setRemoteDescription(i).catch(s=>(this.logger.error("Error Setting WebRTC Remote Description",s),Promise.reject(s)))}else return Promise.reject(c("Cannot complete this procedure. The peerConnection has closed",-1))});n(this,"getCurrentLocalSdpDirection",()=>{let e=this.peerConnection.localDescription;return e&&e.sdp?this.getSdpDirection(e.sdp):""});n(this,"getCurrentRemoteSdpDirection",()=>{let e=this.peerConnection.remoteDescription;return e&&e.sdp?this.getSdpDirection(e.sdp):""});n(this,"createAnswerForHold",async e=>{await this.setRemoteSessionDescriptionFromSdp(e,!1);let t=await this.peerConnection.createAnswer();return await this.doSetLocalDescription(t)});n(this,"createAnswerForResume",async(e,t)=>{await this.setRemoteSessionDescriptionFromSdp(e,!1);let i=await this.peerConnection.createAnswer();t&&(i.sdp=this.processSDPForResumeAnswer(i.sdp,t));let s=await this.doSetLocalDescription(i);return this.getSdpDirection(s)==="a=sendrecv"?this.status="Resume":this.status="Hold",s});n(this,"createOfferForHold",async e=>{let t=this.getSdpDirection(this.peerConnection.localDescription.sdp),i=await this.peerConnection.createOffer();return i.sdp=this.processSdpForHoldOffer(i.sdp,t,e),await this.doSetLocalDescription(i)});n(this,"createOfferForResume",async e=>{let t=await this.peerConnection.createOffer();return t.sdp=this.processSdpForResumeOffer(t.sdp,e),await this.doSetLocalDescription(t)});n(this,"createAnswerForTransfer",async e=>{await this.setRemoteSessionDescriptionFromSdp(e,!1);let t=await this.peerConnection.createAnswer();return await this.doSetLocalDescription(t)});n(this,"addOutgoingVideoTrack",async e=>{if(this.hasOutgoingVideo)return Promise.resolve();this.hasOutgoingVideo=!0;let i=(await this.getSelectedMediaStream(e)).getVideoTracks();if(i.length){let s=i[0];this.outgoingMediaStream.addTrack(s),this.setOutgoingTracksFromStream(this.outgoingMediaStream,!0),this.signaler.onLocalStream(this.callId,this.outgoingMediaStream,this.hasOutgoingVideo)}else{this.hasOutgoingVideo=!1;let s=e.find(o=>o.kind==="videoinput"),r=s?s.label:"not specified";return Promise.reject(`Could not create video track for camera: ${r}`)}});n(this,"createOfferToAddVideo",async e=>{try{return await this.addOutgoingVideoTrack(e),await this.initiateOfferProcess(this.outgoingMediaStream)}catch(t){return await this.removeOutgoingVideoTrack(),Promise.reject(t)}});n(this,"removeOutgoingVideoTrack",async()=>{if(!this.hasOutgoingVideo)return Promise.resolve();this.hasOutgoingVideo=!1;let e=this.outgoingMediaStream.getVideoTracks();e.length&&e.forEach(i=>{i.stop(),i.enabled=!1,this.outgoingMediaStream.removeTrack(i)});let t=this.findSender("video");t&&this.peerConnection.removeTrack(t),this.signaler.onLocalStream(this.callId,this.outgoingMediaStream,this.hasOutgoingVideo)});n(this,"createOfferToRemoveVideo",async(e=!1)=>{this.isOfferer=!0,await this.removeOutgoingVideoTrack();let t=await this.peerConnection.createOffer();return e&&(t=this.downgradeVideoPortSdi(t)),await this.doSetLocalDescription(t,!1)});n(this,"createAnswerForDowngradeToAudio",async e=>{this.hasIncomingVideo=!1,this.hasOutgoingVideo&&await this.removeOutgoingVideoTrack(),await this.setRemoteSessionDescriptionFromSdp(e,!1);let t=await this.peerConnection.createAnswer();return await this.doSetLocalDescription(t)});n(this,"createAnswerForDropVideo",async e=>{this.hasIncomingVideo=!1,await this.setRemoteSessionDescriptionFromSdp(e,!1);let t=await this.peerConnection.createAnswer();return await this.doSetLocalDescription(t)});n(this,"createAnswerForAddRemoteVideo",async e=>{this.hasIncomingVideo=!0,await this.setRemoteSessionDescriptionFromSdp(e,!1);let t=await this.peerConnection.createAnswer();return await this.doSetLocalDescription(t,!0)});n(this,"createAnswerToRejectRemoteVideoUpdate",async e=>{this.hasIncomingVideo=!1,this.hasOutgoingVideo=!1,this.status="Connected",e=this.downgradeVideoPortSdp(e),await this.setRemoteSessionDescriptionFromSdp(e,!1);let t=await this.peerConnection.createAnswer();return await this.doSetLocalDescription(t,!0)});n(this,"processAnswerForRequestToAddVideo",async e=>(await this.setRemoteSessionDescriptionFromSdp(e,!0),this.signaler.onLocalStream(this.callId,this.outgoingMediaStream,this.hasOutgoingVideo),this.signaler.onRemoteStream(this.callId,this.incomingMediaStream,this.hasIncomingVideo),Promise.resolve(this.sdpEnabledForVideo(e))));n(this,"processAnswerForDropVideo",async e=>{await this.setRemoteSessionDescriptionFromSdp(e,!0),this.signaler.onLocalStream(this.callId,this.outgoingMediaStream,this.hasOutgoingVideo),this.signaler.onRemoteStream(this.callId,this.incomingMediaStream,this.hasIncomingVideo),this.status="Connected"});n(this,"processProgressSdp",async(e,t)=>{if(await this.setRemoteSessionDescriptionFromSdp(e,t),t)return this.peerConnection.localDescription.sdp;let i=await this.peerConnection.createAnswer();return await this.doSetLocalDescription(i)});n(this,"processVideoChangedSdp",async(e,t,i)=>{await this.setRemoteSessionDescriptionFromSdp(e,t);let s=this.hasIncomingVideo;this.hasIncomingVideo=["sendrecv","sendonly"].includes(i),s!==this.hasIncomingVideo&&this.signaler.onRemoteStream(this.callId,this.incomingMediaStream,this.hasIncomingVideo),!["sendrecv","recvonly"].includes(i)&&this.hasOutgoingVideo&&(await this.removeOutgoingVideoTrack(),this.signaler.onLocalStream(this.callId,this.outgoingMediaStream,this.hasOutgoingVideo));let o=await this.peerConnection.createAnswer();return o.sdp=this.setOutgoingVideoDirection(o.sdp,i),await this.doSetLocalDescription(o)});n(this,"saveInvitationOfferSdp",e=>{this.invitationOfferSDP=e});n(this,"replaceTrack",async e=>{let t=this.findSender(e.kind);if(t)t.track.enabled=!1,await t.replaceTrack(e),this.logger.log(`Replaced ${e.kind} track`);else return Promise.reject(c("Cannot find sender",-3))});n(this,"holdOutgoingMedia",()=>{this.toggleCallMute(!0),this.toggleCallVideoPaused(!0)});n(this,"resumeOutgoingMedia",()=>{this.toggleCallMute(!1),this.toggleCallVideoPaused(!1)});n(this,"isCallStillActive",()=>this.peerConnection.signalingState!=="closed"&&["new","connecting","connected"].includes(this.peerConnection.connectionState));n(this,"getHasIncomingVideo",()=>this.hasIncomingVideo);n(this,"setHasIncomingVideo",e=>{this.hasIncomingVideo=e});n(this,"getHasOutgoingVideo",()=>this.hasOutgoingVideo);n(this,"setHasOutgoingVideo",e=>{this.hasOutgoingVideo=e});n(this,"getIsVideo",()=>this.hasIncomingVideo||this.hasOutgoingVideo);n(this,"setIsCallTransfer",e=>{this.isCallTransfer=e});n(this,"getIsMuted",()=>this.isMuted);n(this,"setIsOfferer",e=>{this.isOfferer=e});n(this,"getIsPaused",()=>this.isPaused);n(this,"getIsSharing",()=>this.isSharing);n(this,"setIsSharing",e=>{this.isSharing=e});n(this,"getStatus",()=>this.status);n(this,"setStatus",e=>{this.status=e});n(this,"getCurrentLocalDescription",()=>this.peerConnection.localDescription);n(this,"getCurrentRemoteDescription",()=>this.peerConnection.remoteDescription);n(this,"getPeerConnection",()=>this.peerConnection);n(this,"getStatsReport",e=>this.peerConnection.getStats(e));n(this,"resetSignalingState",async e=>{let t=this.getPeerConnection();if(t.signalingState!=="closed"&&t.connectionState==="connected"){this.setStatus(e),["Connected"].includes(e)?this.resumeOutgoingMedia():["Hold"].includes(e)&&this.holdOutgoingMedia();let i=this.peerConnection.signalingState;if(i==="have-local-offer")return this.logger.log("Rolling-back Local Description to last known good:",this.savedLocalDescription),await t.setLocalDescription(this.savedLocalDescription).catch(s=>this.logger.error("resetSignalingState setLocalDescription",s));if(i==="have-remote-offer")return this.logger.log("Rolling-back Remote Description to last known good: ",this.savedRemoteDescription),await t.setRemoteDescription(this.savedRemoteDescription).catch(s=>this.logger.error("resetSignalingState setRemoteDescription",s))}return Promise.resolve()});n(this,"sendDtmfCodes",(e,t)=>{let i=this.findSender("audio");if(!i)return this.logger.warn("No Sender Found for DTMF playback"),!1;let s=i.dtmf,r=s.toneBuffer,o=e;return r&&(s.insertDTMF(""),o=r+o),u(t)&&(s.ontonechange=l=>{l.tone&&t(l.tone)}),s.insertDTMF(o,100,120),!0});n(this,"sdpEnabledForVideo",e=>{let t=!1,s=e.split(`\r
`).find(r=>r.startsWith("m=video"));if(s){let r=s.split(" ");r[1]&&r[1]!=="0"&&(t=!0)}return t});n(this,"getCurrentVideoDirection",()=>{let e=this.peerConnection.localDescription.sdp;return this.getSdpVideoDirection(e)});n(this,"getSdpVideoDirection",e=>{let t=e.split("m=video");if(t.length>1){let i=t[1],s=this.parseSdpLinesForDirectionTag(i);if(s.direction)return s.direction.replace("a=","")}return"inactive"});n(this,"showStreamStatus",e=>{this.logger.log("ShowStreamStatus");let t=this.peerConnection.localDescription,i=this.peerConnection.remoteDescription;if(e&&(this.logger.log(`LocalDescription:
`,t),this.logger.log(`RemoteDescription:
`,i)),this.logger.log("locale sdp direction: ",this.getSdpDirection(t.sdp)),this.logger.log("remote sdp direction: ",this.getSdpDirection(i.sdp)),this.incomingMediaStream){let s=this.incomingMediaStream.getAudioTracks();!Array.isArray(s)||!s.length?this.logger.warn("no incoming audio tracks"):s.forEach(r=>{e?(this.logger.log("incoming Audio Track: ",r),r.readyState!=="live"&&this.logger.warn("Track Not Live")):this.logger.log("incoming audio track enabled: ",r.enabled," muted: ",r.muted," readyState: ",r.readyState)})}else this.logger.warn("No in-coming Media Stream defined");if(this.outgoingMediaStream){let s=this.outgoingMediaStream.getAudioTracks();!Array.isArray(s)||!s.length?this.logger.warn("no outgoing audio tracks"):s.forEach(r=>{e?(this.logger.log("outgoing Audio Track: ",r),r.readyState!=="live"&&this.logger.warn("Track Not Live")):this.logger.log("outgoing audio track enabled: ",r.enabled," muted: ",r.muted," readyState: ",r.readyState)})}if(this.peerConnection){let s=this.findSender("audio"),r=this.findReceiver("audio");e?(this.logger.log("Audio Sender: ",s),this.logger.log("Audio Receiver: ",r)):(this.logger.log("Audio Sender Track enabled: ",s?.track?.enabled),this.logger.log("Audio Receiver Track enabled: ",r?.track?.enabled));let o,l,d,g;this.peerConnection.getStats().then(p=>{this.logger.log("WebRTC Stats:"),p.forEach(h=>{e?["candidate-pair","inbound-rtp","media-source","outbound-rtp","track","transport"].includes(h.type)&&this.logger.log(h,`
`):["transport"].includes(h.type)&&(o=h.bytesReceived,l=h.bytesSent)})}).catch(p=>this.logger.warn("PeerConnection Stats error: ",p)),e||window.setTimeout(()=>{this.peerConnection.getStats().then(p=>{p.forEach(h=>{["transport"].includes(h.type)&&(d=h.bytesReceived,g=h.bytesSent)}),this.logger.log("Sending Data: ",l&&g&&g>l),this.logger.log("Receiving Data: ",o&&d&&d>o)}).catch(p=>this.logger.warn("PeerConnection Stats error: ",p))},1e3)}});n(this,"onIceCandidate",e=>{let t;if(e){e.sdpMLineIndex===0?this.localCandidates.push(e):e.sdpMLineIndex===1&&this.localVideoCandidates.push(e),this.logger.log("onIceCandidate: ",e.candidate);let i=this.isSrflxCandidate(e);t=i.isSrflx,i.isSrflx&&(this.clientIP=i.address,this.isIPV6=i.isIPV6,this.logger.log("clientIP:",this.clientIP," isIPV6:",this.isIPV6))}else t=!0;if(t&&!this.hasGatheredSdp){this.hasGatheredSdp=!0;let i=this.peerConnection.localDescription,s=this.fixIPAddresses(this.doStandardSdpPrep(i.sdp));this.logger.log("onIceCandidateCollectionComplete"),this.logger.log("Initial clientIP: ",this.clientIP),this.logger.log("LocalDescription being sent: ",i.type,`
`,s),u(this.onIceCandidateSdp)?this.onIceCandidateSdp(s):this.logger.warn("ICE collection Occurred with no results collected")}});n(this,"onTrackAdded",e=>{if(this.logger.log("onTrackAdded Event: ",e),!e.streams.length){this.logger.error("onTrack event has no streams",e);return}e.streams.length>1&&this.logger.warn("onTrack event has multiple streams. ",e.streams),this.incomingMediaStream=e.streams[0];let t=this.incomingMediaStream.getVideoTracks();this.hasIncomingVideo=t.length>0,this.signaler.onRemoteStream(this.callId,this.incomingMediaStream,this.hasIncomingVideo)});n(this,"onConnectionStateChange",e=>{switch(this.logger.log("RTCPeerConnectionState Changed event. new state:",e),e){case"closed":this.logger.log("WebRTC indicated call ended"),this.signaler.onReceivedCallEnded(this.callId);break;case"disconnected":this.logger.log("WebRTC indicated call disconnected"),this.signaler.onReceivedCallEnded(this.callId);break;case"failed":this.logger.warn("WebRTC indicated call failure"),this.signaler.onReceivedCallFailed(this.callId,-1);break}});n(this,"createAnswerForAccept",async(e,t,i,s=!1)=>{this.hasOutgoingVideo=s&&!i;let r=await this.getSelectedMediaStream(t);this.setOutgoingTracksFromStream(r),this.outgoingMediaStream=r,this.signaler.onLocalStream(this.callId,this.outgoingMediaStream,this.hasIncomingVideo),i&&(e=this.downgradeVideoPortSdp(e)),await this.setRemoteSessionDescriptionFromSdp(e,!1);let o=await this.peerConnection.createAnswer();return i&&(o=this.downgradeVideoPortSdi(o)),o=this.setIceUfragAndIcePwd(o),await this.doSetLocalDescription(o,!0)});n(this,"setOutgoingTracksFromStream",(e,t=!1)=>{let i=e.getAudioTracks(),s=e.getVideoTracks();if(i&&i.length){this.logger.log("setOutgoingTracksFromStream: Audio Tracks: ",i);let o=i[0],l=!1,d=this.findSender("audio");d&&(d.track?.id!==o.id?this.peerConnection.removeTrack(d):l=!0),l||(o.enabled=!this.isMuted,this.peerConnection.addTrack(o,e),this.logger.log("setOutgoingTracksFromStream: added Audio Track: ",o))}else this.logger.warn("setOutgoingTracksFromStream: No Audio Tracks Found");let r=this.findSender("video");if(t&&s?.length){let o=s[0],l=!1;r&&(r.track?.id!==s[0].id?this.peerConnection.removeTrack(r):l=!0),l||(o.enabled=!0,this.peerConnection.addTrack(o,e),this.logger.log("setOutgoingTracksFromStream: added Video Track: ",o))}else r&&this.peerConnection.removeTrack(r),this.logger.log("setOutgoingTracksFromStream: No Video Tracks Found")});n(this,"doStandardSdpPrep",e=>{let t=this.setMediaBitrate(e);return t=this.removeUnsupportedAttrs(t),this.enableVBRForOpusCodec(t)});n(this,"doSetLocalDescription",async(e,t=!1)=>{e.sdp=this.doStandardSdpPrep(e.sdp),this.savedLocalDescription=this.peerConnection.localDescription,this.logger.log("setLocalDescription: ",e.type,`
`,e.sdp);let i=Promise.resolve("");return t&&(this.hasGatheredSdp=!1,i=new Promise(s=>{let r=window.setTimeout(()=>{this.onIceCandidateSdp=void 0,this.logger.warn("Time-out waiting for ICE candidate. Using localDescription sdp"),s(this.fixIPAddresses(this.peerConnection.localDescription.sdp))},1e4);this.onIceCandidateSdp=o=>{window.clearTimeout(r),s(o),this.onIceCandidateSdp=void 0}})),this.logger.log("doSetLocalDescription - calling setLocalDescription"),await this.peerConnection.setLocalDescription(e).catch(s=>(this.logger.error("Error Setting WebRTC Local Description",s),Promise.reject(s))),t?i:this.fixIPAddresses(this.peerConnection.localDescription.sdp)});n(this,"setMediaBitrate",e=>{let i=e.split(`\r
`),s=[];for(let r of i)r.indexOf("b=AS:")<0&&s.push(r),r.includes("m=audio")&&s.push(`b=AS:${80}`),r.includes("m=video")&&s.push(`b=AS:512\r
a=framerate:20\r
a=framesize:100 480-640`);return s.join(`\r
`)});n(this,"enableVBRForOpusCodec",e=>{let o=e.split(`\r
`),l=this.findLine(o,"a=rtpmap","opus/48000"),d;if(l&&(d=this.getCodecPayloadType(o[l])),!d)return e;let g=this.findLine(o,`a=fmtp:${d}`);return g&&(o[g]=o[g].split(" ")[0].concat(` minptime=${20};useinbandfec=${0};cbr=${0};maxaveragebitrate=${24576}`),e=o.join(`\r
`)),e});n(this,"removeUnsupportedAttrs",e=>e.replace("a=ice-options:trickle","a=ice-lite").split(`\r
`).filter(i=>!(i.includes("a=fmtp:")&&i.includes("111/111"))).join(`\r
`));n(this,"fixIPAddresses",e=>{if(this.clientIP)return this.setIPAddresses(e,this.clientIP);let i=e.split(`\r
`).find(s=>s.startsWith("c=IN IP"));if(i){let s=i.split(" ")[2];s!=="0.0.0.0"&&(this.clientIP=s,e=this.setIPAddresses(e,this.clientIP))}return e});n(this,"getCodecPayloadType",e=>{let t=new RegExp("a=rtpmap:(\\d+) \\w+\\/\\d+"),i=e.match(t);return i&&i.length===2?i[1]:void 0});n(this,"getMediaStreamPerDevices",e=>{let t=e;this.hasOutgoingVideo||(t=t.filter(s=>s.kind!=="videoinput"));let i={};for(let s of t)s.kind==="audioinput"&&s.deviceId?i.audio={deviceId:s.deviceId}:this.hasOutgoingVideo&&s.kind==="videoinput"&&(s.deviceId?i.video={deviceId:s.deviceId}:i.video=!0);return navigator.mediaDevices.getUserMedia(i)});n(this,"getSelectedMediaStream",async e=>{if(this.logger.log("getSelectedMediaStream called.  Devices: ",e),e){let t=await this.getMediaStreamPerDevices(e);return this.logger.log("getSelectedMediaStream devices, stream: ",e,t),t}else{let t={audio:!0,video:this.hasOutgoingVideo},i=await navigator.mediaDevices.getUserMedia(t);return this.logger.log("getSelectedMediaStream constraints, stream: ",t,i),i}});n(this,"findSender",e=>this.peerConnection.getSenders().find(i=>i.track&&i.track.kind===e));n(this,"findReceiver",e=>this.peerConnection.getReceivers().find(i=>i.track&&i.track.kind===e));n(this,"findLine",(e,t,i)=>this.findLineInRange(e,0,-1,t,i));n(this,"findLineInRange",(e,t,i,s,r)=>{let o=i!==-1?i:e.length;r&&(r=r.toLowerCase());for(let l=t;l<o;++l)if(e[l].indexOf(s)===0&&(!r||e[l].toLowerCase().indexOf(r)!==-1))return l});n(this,"stopMedia",(e,t)=>{t&&t.forEach(i=>i.stop()),e&&e.getTracks().forEach(s=>s.stop())});n(this,"getSdpDirection",e=>{let t=this.parseSdpLinesForDirectionTag(e);return t.index>-1?t.direction:"a=sendrecv"});n(this,"downgradeVideoPortSdi",e=>(e.sdp=this.downgradeVideoPortSdp(e.sdp),e));n(this,"downgradeVideoPortSdp",e=>{let i=e.split(`\r
`).find(s=>s.includes("m=video"));if(i){let s=i.split(" ");s[1]="0";let r=s.join(" ");e=e.replace(i,r)}return e});n(this,"setIceUfragAndIcePwd",e=>{let t="",i="",s=e.sdp,r=s.split(`\r
`);for(let o of r)o.includes("a=ice-ufrag")&&(t=o),o.includes("a=ice-pwd")&&(i=o);return s+=t+`\r
`,s+=i+`\r
`,e.sdp=s,e});n(this,"processSdpForHoldOffer",(e,t,i)=>{let s=this.parseSdpLinesForDirectionTag(e);return s.index>-1&&(i||["a=recvonly","a=inactive"].includes(t)||s.direction==="a=recvonly"?s.sdpParts[s.index]="a=inactive":s.sdpParts[s.index]="a=sendonly"),s.sdpParts.join(`\r
`)});n(this,"processSdpForResumeOffer",(e,t)=>{let i=this.parseSdpLinesForDirectionTag(e);return i.index>-1&&(i.sdpParts[i.index]=t?"a=recvonly":"a=sendrecv"),i.sdpParts.join(`\r
`)});n(this,"processSDPForResumeAnswer",(e,t)=>{let i=this.parseSdpLinesForDirectionTag(e);return i.index>-1&&(i.sdpParts[i.index]=t?"a=sendonly":"a=sendrecv"),i.sdpParts.join(`\r
`)});n(this,"isSrflxCandidate",e=>{let t=new RTCIceCandidate(e),i=t.address;return{isSrflx:t.type==="srflx"&&t.protocol==="udp",address:i,port:t.port,isIPV6:i.includes(":")}});n(this,"parseSdpForRemoteSessionDesc",e=>{if(this.isSharing){let t=e.split("m=video");for(let i of t)if(!i.includes("UDP/TLS/RTP/SAVP 117"))if(i.includes("m=audio"))e=i;else{let s=i;s.includes("m=video")&&(s=s.replace("m=video","")),e+="m=video",e+=s}}else if(e.includes("a=content:slides")){let t=e.split("m=video");for(let i of t)if(!i.includes("content:slides"))if(i.includes("m=audio"))e=i;else{let s=i;s.includes("m=video")&&(s=s.replace("m=video","")),e+="m=video",e+=s}}else{let t=e.split(`\r
`);t=t.filter(i=>!i.includes("a=mid:")),e=t.join(`\r
`)}return{sdp:e,type:this.isOfferer?"answer":"offer"}});n(this,"setIPAddresses",(e,t)=>{if(!t)return this.logger.error("No Candidate or local client IP found.  Cannot process SDP"),e;let i=this.getReplacementString(t),s=new RegExp("IN IP4 [0-9.]+","g"),r=new RegExp("IN IP6 [0-9a-z.:]+","g");return e.split(`\r
`).map(o=>(o.includes("IN IP4")?o=o.replace(s,i):o.includes("IN IP6")&&(o=o.replace(r,i)),o)).join(`\r
`)});n(this,"getReplacementString",e=>{let t=e||"";return t.includes(":")?`IN IP6 ${t}`:`IN IP4 ${t}`});n(this,"parseSdpLinesForDirectionTag",e=>{if(typeof e=="string"){let t=e.split(`\r
`),i=t.findIndex(r=>["a=inactive","a=recvonly","a=sendonly","a=sendrecv"].includes(r)),s="";return i>-1?s=t[i]:this.logger.warn("SDP is missing direction a-tag",e),{direction:s,index:i,sdpParts:t}}return this.logger.warn("bad SDP input"),{direction:"",index:-1,sdpParts:[]}});n(this,"setOutgoingVideoDirection",(e,t)=>{let i=e.split(`\r
`),s=!1;for(let r of i)if(r.startsWith("m=video"))s=!0;else if(s&&["a=inactive","a=recvonly","a=sendonly","a=sendrecv"].includes(r)){t==="sendrecv"?r="a=sendrecv":t==="recvonly"?r="a=sendonly":t==="sendonly"?r="a=recvonly":r="a=inactive";break}return i.join(`\r
`)});this.logger=new b("TMO-WEBRTC"),this.callId=e,this.signaler=t,this.iceServers=[{urls:[`stun:${i}:${s}`]}],this.peerConnection=new RTCPeerConnection({bundlePolicy:"balanced",iceServers:this.iceServers,rtcpMuxPolicy:"require"}),this.peerConnection.onconnectionstatechange=r=>{this.onConnectionStateChange(r.target.connectionState)},this.peerConnection.onsignalingstatechange=r=>{let o=this.getCurrentLocalSdpDirection(),l=this.getCurrentRemoteSdpDirection();this.logger.log("onSignalingStateChange event state: ",r.target.signalingState," localDir: ",o," remoteDir: ",l)},this.peerConnection.ontrack=r=>{this.logger.log("onTrack event: ",r),this.onTrackAdded(r)},this.peerConnection.onnegotiationneeded=r=>{this.logger.log("onNegotiationNeeded event state: ",r)},this.peerConnection.onicecandidate=r=>{this.onIceCandidate(r.candidate)},this.peerConnection.oniceconnectionstatechange=r=>{this.logger.log("onIceConnectionStateChange event state: ",r.target.iceConnectionState)},this.peerConnection.onicegatheringstatechange=r=>{this.logger.log("onIceGatheringStateChange event state: ",r.target.iceGatheringState)}}};var A=class{constructor(){n(this,"callSessionMap",{});n(this,"cfg");n(this,"cpaasBaseUrl");n(this,"cpaasCallUrl");n(this,"cpaasServiceAPIs");n(this,"isCallTransfer",!1);n(this,"pubsub");n(this,"logger");n(this,"signaler");n(this,"turnServerIp","");n(this,"turnServerUdpPort","");n(this,"webSocketAPIs");n(this,"initialize",(e,t,i)=>{this.cfg=e,this.cpaasBaseUrl=`${t.cpaasRootUrl}/cpaas/v1`,this.cpaasCallUrl=`${this.cpaasBaseUrl}/call`,this.cpaasServiceAPIs=t,this.webSocketAPIs=i;let s={domain:this.cfg.turnServerDomain||"stun.l.google.com",port:this.cfg.turnServerPort>0?this.cfg.turnServerPort:19302};this.setTurnServerDetails(s.domain,String(s.port)),this.webSocketAPIs.subscribe("WS_sessionInvitationNotification",this.callSessionInvitationHandler,"callingApis"),this.webSocketAPIs.subscribe("WS_sessionStatusNotification",this.callSessionStatusNotificationHandler,"callingApis"),this.webSocketAPIs.subscribe("WS_vvoipSessionTransferNotification",this.vvoipSessionTransferHandler,"callingApis")});n(this,"subscribe",(e,t,i)=>this.pubsub.subscribe(e,t,i));n(this,"unsubscribe",(e,t)=>this.pubsub.unsubscribe(e,t));n(this,"publishEvent",(e,...t)=>{this.pubsub.publish(e,...t)});n(this,"onCallDowngradedToAudio",e=>{this.publishEvent("OnCallDowngradedToAudio",e)});n(this,"onLocalStream",(e,t,i)=>{this.publishEvent("OnLocalStream",e,t,i)});n(this,"onReceivedCallActive",e=>{this.publishEvent("OnReceivedCallActive",e)});n(this,"onReceivedCallEnded",e=>{this.publishEvent("OnReceivedCallEnded",e)});n(this,"onReceivedCallFailed",(e,t)=>{this.publishEvent("OnReceivedCallFailed",e,t)});n(this,"onReceivedCallHold",e=>{this.publishEvent("OnReceivedCallHold",e)});n(this,"onReceivedCallRejected",e=>{this.publishEvent("OnReceivedCallRejected",e)});n(this,"onReceivedCallResume",e=>{this.publishEvent("OnReceivedCallResume",e)});n(this,"onReceivedCallStatus",(e,t)=>{this.publishEvent("OnReceivedCallStatus",e,t)});n(this,"onReceivedNewCall",(e,t,i,s,r,o,l,d)=>{this.publishEvent("OnReceivedNewCall",e,t,i,s,r,o,l,d)});n(this,"onReceivedNewScreenShare",(e,t)=>{this.publishEvent("OnReceivedNewScreenShare",e,t)});n(this,"onReceivedScreenShareEnded",e=>{this.publishEvent("OnReceivedScreenShareEnded",e)});n(this,"onRemoteStream",(e,t,i)=>{this.publishEvent("OnRemoteStream",e,t,i)});n(this,"onRemoteVideoDropped",e=>{this.publishEvent("OnRemoteVideoDropped",e)});n(this,"onRemoteVideoReceived",e=>{this.publishEvent("OnRemoteVideoReceived",e)});n(this,"onRemoteVideoUpgradeRequest",e=>{this.publishEvent("OnRemoteVideoUpgradeRequest",e)});n(this,"onTransferTargetDetails",(e,t)=>{this.publishEvent("OnTransferTargetDetails",e,t)});n(this,"setTurnServerDetails",(e,t)=>{this.logger.log("Setting TURN IP:",e," Port:",t),this.turnServerIp=e,this.turnServerUdpPort=t});n(this,"startCall",async(e,t,i,s,r,o,l)=>{if(!e||!i||!s)return Promise.reject(c("startCall missing required parameters",-1));let d=this.createCallSession(i,s,s,o,e,"");if(!d)return Promise.reject(c("Failed to create new CallSession object",-2));d.iAmOriginator=!0,d.webRtcObj.setHasOutgoingVideo(t),d.relatedSessionId=r,this.saveCallSession(i,d);try{let g=await d.webRtcObj.createOfferWithDeviceList(l);return await this.sendCallStart(i,g)}catch(g){return this.logger.error("startCall Error: ",C(g)),this.clearCallSession(i),Promise.reject(g)}});n(this,"endCall",async(e,t)=>{let i=this.getCallSession(e);if(!i)return Promise.reject(c("Could not find indicated CallSession",-1));let s=i.webRtcObj;s.closePeerConnections(),t&&await this.sendCallEnd(e),s.getIsSharing()?this.onReceivedScreenShareEnded(i.callId):this.onReceivedCallEnded(i.callId),await this.clearCallSession(e)});n(this,"acceptCall",async(e,t,i=!1,s=!1)=>{this.logger.log(`
callId: `,e,`
deviceList: `,t,`
allowIncomingVideo: `,i,`
provideOutgoingVideo: `,s);let r=this.getCallSession(e);if(!r)return Promise.reject(c("Could not find indicated CallSession",-1));try{if(this.isCallTransfer){this.isCallTransfer=!1;let o=await r.webRtcObj.createOfferWithDeviceList(t);await this.sendTransferOfferSdp(e,o)}else{let o=await r.webRtcObj.acceptIncomingCallInvitation(t,i,s);await this.sendCallConnected(e,o)}}catch(o){return this.onReceivedCallFailed(e,1),this.logger.error("acceptCall Error: ",C(o)),this.clearCallSession(e),Promise.reject(o)}});n(this,"rejectCall",async(e,t)=>{await this.sendDeleteSessionNotify(e,t),await this.clearCallSession(e)});n(this,"muteCall",async e=>{let t=this.getCallSession(e);if(!t)return Promise.reject(c("Could not find indicated CallSession",-1));if(t.isLocalHold)t.muteStateBeforeLocalHold=!0;else if(!t.webRtcObj.toggleCallMute(!0))return Promise.reject(c("Error muting call"));return Promise.resolve()});n(this,"unmuteCall",async e=>{let t=this.getCallSession(e);if(!t)return Promise.reject(c("Could not find indicated CallSession",-1));if(t.isLocalHold)t.muteStateBeforeLocalHold=!1;else if(!t.webRtcObj.toggleCallMute(!1))return Promise.reject(c("Error Unmuting call"));return Promise.resolve()});n(this,"isCallMuted",e=>{let t=this.getCallSession(e);return t?t.isLocalHold?t.muteStateBeforeLocalHold:t.webRtcObj.getIsMuted():!1});n(this,"holdCall",async e=>{let t=this.getCallSession(e);if(!t)return Promise.reject(c("Could not find indicated CallSession",-1));await this.toggleCallHold(t,!0)});n(this,"resumeCall",async e=>{let t=this.getCallSession(e);if(!t)return Promise.reject(c("Could not find indicated CallSession",-1));let i=t.webRtcObj.getStatus();["Hold","Resume","VideoDowngrade"].includes(i)&&await this.toggleCallHold(t,!1)});n(this,"isCallOnHold",e=>{let t=this.getCallSession(e);return t?t.isRemoteHold||t.isLocalHold:!1});n(this,"pauseVideoCall",async e=>{let t=this.getCallSession(e);if(!t)return Promise.reject(c("Could not find indicated CallSession",-1));if(t.webRtcObj.getIsPaused())return Promise.resolve();await t.webRtcObj.toggleCallVideoPaused(!0)});n(this,"resumeVideoCall",async e=>{let t=this.getCallSession(e);if(!t)return Promise.reject(c("Could not find indicated CallSession",-1));if(t.isLocalHold)t.videoPauseStateBeforeLocalHold=!1;else{if(!t.webRtcObj.getIsPaused())return Promise.resolve();await t.webRtcObj.toggleCallVideoPaused(!1)}});n(this,"isVideoCallPaused",e=>{let t=this.getCallSession(e);return t?t.isLocalHold?t.videoPauseStateBeforeLocalHold:t.webRtcObj.getIsPaused():!1});n(this,"sendDtmfCodes",(e,t,i)=>{let s=this.getCallSession(e);return s?(s.webRtcObj.sendDtmfCodes(t,i),X()):c("Could not find indicated CallSession",-1)});n(this,"acceptRemoteVideoUpgrade",async e=>{let t=this.getCallSession(e);if(!t)return Promise.reject(c("Could not find indicated CallSession",-1));let i=await t.webRtcObj.createAnswerForAddRemoteVideo(t.remoteSdp);await this.sendCallConnected(t.callId,i)});n(this,"rejectRemoteVideoUpgrade",async e=>{let t=this.getCallSession(e);if(!t)return Promise.reject(c("Could not find indicated CallSession",-1));let i=await t.webRtcObj.createAnswerToRejectRemoteVideoUpdate(t.remoteSdp);await this.sendCallConnected(t.callId,i)});n(this,"reconnectCall",async e=>{let t=this.getCallSession(e);if(!t)throw c("Could not find indicated CallSession",-1);let i=t.webRtcObj,s=i.getPeerConnection();return s&&s.connectionState==="connected"?(await i.initiateOfferProcess(),this.onReceivedCallActive(e),!0):(this.onReceivedCallEnded(e),!1)});n(this,"clearCallSession",e=>{let t=this.getCallSession(e);if(!t){this.logger.error("clearCallSession could not find call session: ",e);return}t.webRtcObj.closePeerConnections(),this.removeCallSession(e)});n(this,"getCallSessionUrl",e=>{let t=this.getCallSession(e);return t?t.callObjectRefUrl:(this.logger.error("getCallSessionUrl could not find call session: ",e),"")});n(this,"updateMediaDevice",async(e,t,i)=>{let s;switch(t){case"audioinput":s={audio:{deviceId:{exact:i}}};break;case"videoinput":s={video:{deviceId:{exact:i}}};break;default:return Promise.reject(c("Cannot match device type",-1))}let r=await navigator.mediaDevices.getUserMedia(s),o;switch(t){case"audioinput":o=r.getAudioTracks()[0];break;case"videoinput":o=r.getVideoTracks()[0];break}let l=this.getCallSession(e);if(!l)return this.logger.error("updateMediaDevice could not find call session: ",e),Promise.reject(c("Cannot find callSession",-2));await l.webRtcObj.replaceTrack(o)});n(this,"getSignalerObject",()=>this.signaler);n(this,"waitForOfferSdp",e=>{let t=this.getCallSession(e);if(!t)return Promise.reject(c("Could not find indicated callSession",-1));if(t.offerSdp)return Promise.resolve(t.offerSdp);let i=Date.now(),s=60*1e3;return new Promise((r,o)=>{let l=window.setInterval(()=>{t.offerSdp&&(window.clearInterval(l),r(t.offerSdp)),Date.now()>i+s&&(window.clearInterval(l),o(c("Timeout waiting for offerSdp")))},100)})});n(this,"showAllCallStatus",e=>{let t=this.getAllCallSessions();for(let i of t)i.webRtcObj.showStreamStatus(e)});n(this,"sendSessionStatus",async e=>{let t=e.callId;return await this.sendCallInProgress(e.callId,""),e.webRtcObj.getIsSharing()?this.onReceivedNewScreenShare(t,e.originator):(this.onReceivedNewCall(t,e.originator,e.originatorName,e.terminator,e.terminatorName,e.serverCorrelator,e.relatedSessionId,e.webRtcObj.getIsVideo()),this.sendCallIsRinging(e.callId).catch(()=>Promise.resolve())),Promise.resolve()});n(this,"processNewIncomingCall",async e=>{let t=e.callId,i=await this.sendCallIsRinging(t);if(i.ok)return e.webRtcObj.getIsSharing()?this.onReceivedNewScreenShare(t,e.originator):this.onReceivedNewCall(t,e.originator,e.originatorName,e.terminator,e.terminatorName,e.serverCorrelator,e.relatedSessionId,e.webRtcObj.getHasIncomingVideo()),Promise.resolve();throw i});n(this,"sendTransferOfferSdp",async(e,t)=>{let i=this.getCallSession(e);if(!i)throw c("Could not find indicated CallSession",-1);let s=await this.sendCallInProgress(e,void 0);if(s.ok&&(s=await this.sendCallConnected(e,t),s.ok))if(s.data?.receiverSessionStatus){let r=s.data.receiverSessionStatus.sdp;await i.webRtcObj.setRemoteSessionDescriptionFromSdp(r,!0),this.onReceivedCallActive(e)}else s=c("Missing expected response data fields",-1);return s});n(this,"sendTransferConnectedStatusAttended",async e=>{let t=e.webRtcObj;await t.initiateOfferProcess();let i=t.getCurrentLocalDescription().sdp,s=await this.sendCallConnected(e.callId,i);return s.ok?Promise.resolve():Promise.reject(s)});n(this,"sendDeleteSessionNotify",async(e,t)=>{await this.sendCallEnd(e,t);let i=this.getCallSession(e);i?.webRtcObj&&(i.webRtcObj.getIsSharing()||this.onReceivedCallRejected(e))});n(this,"sendCallStart",async(e,t)=>{let i=this.getCallSession(e);if(!i)return Promise.reject(c("Could not find indicated CallSession",-1));if(i.offerSdp=t,i.isConference)return i.webRtcObj.setStatus("InProgress"),Promise.resolve(e);if(i.pidflo)return Promise.reject("Emergency Calls not handled");let s=`${this.cpaasCallUrl}/start`,r=JSON.stringify({from:i.lineInfo,to:i.terminator,sdp:t,clientCorrelator:V()}),o={},l=await this.cpaasServiceAPIs.cpaasPostFetch(s,o,r);return l.ok&&l.data?.callId?(i.callId=l.data.callId,i.sessionId=i.callId,this.removeCallSession(e),this.saveCallSession(i.callId,i),Promise.resolve(i.callId)):(i.webRtcObj.closePeerConnections(),this.logger.warn("Error sending Call Start request.",l.status),Promise.reject(l))});n(this,"sendCallIsRinging",async e=>{if(!this.getCallSession(e))return Promise.reject(c("Could not find indicated CallSession",-1));let i=`${this.cpaasCallUrl}/ringing/${e}`,s=await this.cpaasServiceAPIs.cpaasPostFetch(i,{},void 0);return s.ok?Promise.resolve(s):(this.logger.warn("Error sending Call isRinging status.",s.status),this.onReceivedCallFailed(e,s.status),Promise.reject(c("sendCallIsRinging error",s.status)))});n(this,"sendCallResume",async(e,t)=>{if(!this.getCallSession(e))return Promise.reject(c("Could not find indicated CallSession",-1));let s=`${this.cpaasCallUrl}/resume/${e}`,r=await this.cpaasServiceAPIs.cpaasPostFetch(s,{},JSON.stringify({sdp:t}));return r.ok?Promise.resolve(r):(this.logger.warn("Error sending Call Resume request.",r.status),this.onReceivedCallFailed(e,r.status),Promise.reject(c("sendCallResume error",r.status)))});n(this,"sendCallAcceptResume",async(e,t)=>{if(!this.getCallSession(e))return Promise.reject(c("Could not find indicated CallSession",-1));let s=`${this.cpaasCallUrl}/acceptResume/${e}`,r=await this.cpaasServiceAPIs.cpaasPostFetch(s,{},JSON.stringify({sdp:t}));return r.ok?Promise.resolve(r):(this.logger.warn("Error sending Call AcceptResume response.",r.status),this.onReceivedCallFailed(e,r.status),Promise.reject(c("sendCallAcceptResume error",r.status)))});n(this,"sendCallProceeding",async(e,t)=>{if(!this.getCallSession(e))return Promise.reject(c("Could not find indicated CallSession",-1));let s=`${this.cpaasCallUrl}/proceeding/${e}`,r=await this.cpaasServiceAPIs.cpaasPostFetch(s,{},JSON.stringify({sdp:t}));return r.ok?Promise.resolve(r):(this.logger.warn("Error sending Call Proceeding status.",r.status),this.onReceivedCallFailed(e,r.status),Promise.reject(c("sendCallProceeding error",r.status)))});n(this,"sendCallInProgress",async(e,t)=>{if(!this.getCallSession(e))return Promise.reject(c("Could not find indicated CallSession",-1));let s=`${this.cpaasCallUrl}/inProgress/${e}`,r=JSON.stringify({sdp:t}),o=await this.cpaasServiceAPIs.cpaasPostFetch(s,{},r);return o.ok?Promise.resolve(o):(this.logger.warn("Error sending Call InProgress status.",o.status),this.onReceivedCallFailed(e,o.status),Promise.reject(c("sendCallInProgress error",o.status)))});n(this,"sendCallHold",async(e,t)=>{if(!this.getCallSession(e))return Promise.reject(c("Could not find indicated CallSession",-1));let s=`${this.cpaasCallUrl}/hold/${e}`,r=await this.cpaasServiceAPIs.cpaasPostFetch(s,{},JSON.stringify({sdp:t}));return r.ok?Promise.resolve(r):(this.logger.warn("Error sending Call Hold request.",r.status),this.onReceivedCallFailed(e,r.status),Promise.reject(c("sendCallHold error",r.status)))});n(this,"sendCallAcceptHold",async(e,t)=>{if(!this.getCallSession(e))return Promise.reject(c("Could not find indicated CallSession",-1));let s=`${this.cpaasCallUrl}/acceptHold/${e}`,r=await this.cpaasServiceAPIs.cpaasPostFetch(s,{},JSON.stringify({sdp:t}));return r.ok?Promise.resolve(r):(this.logger.warn("Error sending Call AcceptHold response.",r.status),this.onReceivedCallFailed(e,r.status),Promise.reject(c("sendCallAcceptHold error",r.status)))});n(this,"sendCallConnected",async(e,t)=>{if(!this.getCallSession(e))return Promise.reject(c("Could not find indicated CallSession",-1));let s=`${this.cpaasCallUrl}/connected/${e}`,r=await this.cpaasServiceAPIs.cpaasPostFetch(s,{},JSON.stringify({sdp:t}));return r.ok?Promise.resolve(r):(this.logger.warn("Error sending Call Connected status.",r.status),this.onReceivedCallFailed(e,r.status),Promise.reject(c("sendCallConnected error",r.status)))});n(this,"sendCallUpdate",async(e,t)=>{if(!this.getCallSession(e))return Promise.reject(c("Could not find indicated CallSession",-1));let s=`${this.cpaasCallUrl}/update/${e}`,r=await this.cpaasServiceAPIs.cpaasPostFetch(s,{},JSON.stringify({sdp:t}));return r.ok?Promise.resolve(r):(this.logger.warn("Error sending Call Update request.",r.status),this.onReceivedCallFailed(e,r.status),Promise.reject(c("sendCallUpdate error",r.status)))});n(this,"sendCallEnd",async(e,t)=>{let i=this.getCallSession(e);if(!i)return Promise.reject(c("Could not find indicated CallSession",-1));let s=`${this.cpaasCallUrl}/end/${e}`,r={};r.Conference=i.isConference?"true":"false",r.Reason=t||"NORMAL_USER_DISCONNECT";let o=await this.cpaasServiceAPIs.cpaasDeleteFetch(s,r);return o.ok?Promise.resolve(o):Promise.reject(c("sendCallEnd error",o.status))});n(this,"createCallSession",(e,t,i,s,r,o)=>{if(!this.turnServerIp&&!this.turnServerUdpPort){this.logger.error("createCallSession Error: TURN Server IP and UDP port must be defined");return}let l=new $(e,this.signaler,this.turnServerIp,this.turnServerUdpPort);return i.startsWith("+1")&&(i=i.replace("+1","1")),r.startsWith("+1")&&(r=r.replace("+1","1")),{callId:e,callObjectRefUrl:"",iAmOriginator:!1,isLocalHold:!1,isRecvAttendedXfer:!1,isRemoteHold:!1,lineInfo:y(t),originator:i,originatorName:s,relatedSessionId:"",sessionId:"",terminator:r,terminatorName:o,webRtcObj:l}});n(this,"getCallSession",e=>{if(!!e)return this.callSessionMap[e]});n(this,"saveCallSession",(e,t)=>{!e||!t||(this.callSessionMap[e]=t)});n(this,"removeCallSession",e=>{!this.getCallSession(e)||delete this.callSessionMap[e]});n(this,"getAllCallSessions",()=>{let e=[],t=Object.keys(this.callSessionMap);for(let i of t)e.push(this.callSessionMap[i]);return e});n(this,"findCallSessionBySessionId",e=>{if(!e)return;let t=Object.keys(this.callSessionMap);for(let i of t){let s=this.callSessionMap[i];if(s.sessionId===e)return s}});n(this,"toggleCallHold",async(e,t)=>{t?e.isLocalHold||await this.doHoldProcess(e,!1):e.isLocalHold&&await this.doResumeProcess(e)});n(this,"doHoldProcess",async(e,t)=>{try{let i=e.webRtcObj;e.isLocalHold=!0;let s=await i.createOfferForHold(t);this.logger.log("doHoldProcess: Sending Hold Offer. State: ",i.getCurrentLocalSdpDirection());let o=(await this.sendCallHold(e.callId,s)).data;if(!o)throw c("Bad Response Data. Missing receiverSessionStatus",-1);e.muteStateBeforeLocalHold=i.getIsMuted(),e.videoPauseStateBeforeLocalHold=i.getIsPaused(),i.setStatus(o.status),i.holdOutgoingMedia(),await i.setRemoteSessionDescriptionFromSdp(o.sdp,!0)}catch(i){return await e.webRtcObj.resetSignalingState("Connected"),e.isLocalHold=!1,this.logger.error("doHoldProcess Error: ",C(i)),Promise.reject(i)}});n(this,"doResumeProcess",async e=>{try{let t=e.webRtcObj,i=await t.createOfferForResume(e.isRemoteHold);this.logger.log("doResumeProcess: Sending Resume Offer. State: ",t.getCurrentLocalSdpDirection());let r=(await this.sendCallResume(e.callId,i)).data;t.setStatus(r.status),await t.setRemoteSessionDescriptionFromSdp(r.sdp,!0),t.toggleCallMute(e.muteStateBeforeLocalHold),t.toggleCallVideoPaused(e.videoPauseStateBeforeLocalHold),e.isLocalHold=!1}catch(t){return await e.webRtcObj.resetSignalingState("Hold"),e.isLocalHold=!0,this.logger.error("doResumeProcess Error: ",C(t)),Promise.reject(t)}});n(this,"callSessionInvitationHandler",async e=>{let t;try{let i=e;if(!i){this.logger.warn("callSessionInvitationHandler: Network sent empty sessionData object");return}let s=i.sdp,r=G(i.originatorAddress),o=i.originatorName,l=G(i.receiverAddress),d=i.receiverName,g=i.callObjectRef,p=i.callType,h=i.serverCorrelator||"",m="",w=N(g),v=w;if(t=this.createCallSession(v,l,r,o,l,d),t.callObjectRefUrl=g.replace("/conference/","/sessions/"),t.lineInfo=l,t.sessionId=w,t.serverCorrelator=h,t.webRtcObj.setIsOfferer(!1),this.saveCallSession(v,t),!s){if(this.isCallTransfer=!0,t.webRtcObj.setIsOfferer(!0),t.relatedSessionId=m,this.saveCallSession(v,t),["audio","video"].includes(p)){let ie=p==="video";t.webRtcObj.setHasIncomingVideo(ie),await this.processNewIncomingCall(t)}else this.logger.warn("callSessionInvitationHandler unknown call type: ",p);return}let q=t.webRtcObj.sdpEnabledForVideo(s),_=s.includes("m=audio");q&&_?t.webRtcObj.setHasIncomingVideo(!0):_?t.webRtcObj.setHasIncomingVideo(!1):q&&!_&&(t.webRtcObj.setHasIncomingVideo(!0),t.webRtcObj.setIsSharing(!0)),this.saveCallSession(v,t),t.webRtcObj.saveInvitationOfferSdp(s),await this.sendSessionStatus(t)}catch(i){if(t){let s=t.callId;this.removeCallSession(s),this.onReceivedCallFailed(s,3)}this.logger.error("callSessionInvitationHandler Error: ",C(i))}});n(this,"vvoipSessionTransferHandler",async e=>{try{let t=e,i=t.resourceURL,s=t.transferStatus,r=N(i),o=this.findCallSessionBySessionId(r);if(!o)return this.logger.warn("vvoipSessionTransferHandler: No CallSession found for sessionId",r),Promise.reject("No CallSession Found");switch(this.logger.log("vvoipSessionTransferHandler: xfer status update. callId: ",o.callId,s),s){case"Successful":o.callTransferSuccess="success";break;case"Declined":o.callTransferSuccess="fail";let l=t.reason?.text;l&&this.logger.warn("vvoipSessionTransferHandler: Call Transfer Declined because: ",l);break;case"InProgress":break;default:this.logger.warn("vvoipSessionTransferHandler: unknown call transfer status: ",s)}}catch(t){return this.logger.error("vvoipSessionTransferHandler Error: ",C(t)),Promise.reject(t)}});n(this,"callSessionStatusNotificationHandler",e=>{try{let t=e,i=t.callObjectRef,s=N(i),r=this.findCallSessionBySessionId(s);if(!r){this.logger.warn("callSessionStatusNotificationHandler: No CallSession found for Call sessionId",s);return}r.callObjectRefUrl=i.replace("/conference/","/sessions/"),(t.transferTargetAddress||t.transferTargetName)&&this.onTransferTargetDetails(r.callId,t),this.callSessionStatusSubHandler(r,t).catch(o=>{this.logger.warn("callSessionStatusNotificationHandler: ",C(o))})}catch(t){this.logger.error("callSessionStatusNotificationHandler Error: ",C(t))}});n(this,"callSessionStatusSubHandler",async(e,t)=>{let i=t.status,s=t.sdp,r=t.responseCode;typeof r=="string"&&(r=parseInt(r,10));let o=t.offer,l=e.webRtcObj,d=l.getStatus();if(l.setStatus(i),i==="Connected"&&(l.getCurrentLocalSdpDirection()==="a=recvonly"||e.isRecvAttendedXfer)&&(i="Resume",l.setStatus(i)),["Terminated","SessionCancelled"].includes(i))await this.csshTerminated(e,r);else if(i==="Declined"&&r===486)await this.csshDeclined(e);else if(i==="Hold")await this.csshHold(e,s,t,d);else if(i==="Resume")await this.csshResume(e,s);else if(i==="VideoUpgrade")await this.csshVideoUpGrade(e,s);else{if(i==="VideoDowngrade")return await this.csshVideoDownGrade(e,s),Promise.resolve();if(await this.csshCallStatus(e,s,!!o,r))return Promise.resolve()}if(["Connected","Resume","VideoDowngrade"].includes(d)&&i==="Connected"){let g=await l.createAnswerForTransfer(s),p=await this.sendCallConnected(e.callId,g);return p.ok?(this.onReceivedCallActive(e.callId),Promise.resolve()):Promise.reject(p)}["Connected","InProgress"].includes(i)&&[180,183,200].includes(r)?await this.csshConnectedOrInProgress(e,s,o,r):i==="Proceeding"&&r===183&&await this.csshProceeding(e,s,o)});n(this,"csshTerminated",async(e,t)=>{let i=e.webRtcObj;i.getIsSharing()?i.setIsSharing(!1):(this.clearCallSession(e.callId),t===480?this.onReceivedCallRejected(e.callId):this.onReceivedCallEnded(e.callId))});n(this,"csshDeclined",async e=>{let t=e.webRtcObj;t.getIsSharing()?t.setIsSharing(!1):(this.clearCallSession(e.callId),this.onReceivedCallRejected(e.callId))});n(this,"csshHold",async(e,t,i,s)=>{if(i.status==="Hold"&&s==="Hold"&&!t)return e.isRecvAttendedXfer=!0,await this.sendTransferConnectedStatusAttended(e);let r=e.webRtcObj,o=i.offer.mediaIndicator.direction;this.logger.log("csshHold: Received Offer for Hold.  Direction: ",o);let l=await r.createAnswerForHold(t);this.logger.log("csshHold: Sending Hold Answer to remote Offer. State: ",r.getCurrentLocalSdpDirection()),await this.sendCallAcceptHold(e.callId,l),this.onReceivedCallHold(e.callId)});n(this,"csshResume",async(e,t)=>{let i=e.callId,s=e.webRtcObj;if(e.isRecvAttendedXfer)e.isRecvAttendedXfer=!1,await s.setRemoteSessionDescriptionFromSdp(t,!0);else{let r=await s.createAnswerForResume(t,e.isLocalHold);this.logger.log("csshResume: Sending Resume Answer to remote Offer. State: ",s.getCurrentLocalSdpDirection());let o=await this.sendCallAcceptResume(i,r);if(!o.ok)return Promise.reject(o)}e.isRemoteHold=!1,this.onRemoteStream(i,s.getIncomingMediaStream(),s.getHasIncomingVideo()),this.onReceivedCallResume(i)});n(this,"csshVideoUpGrade",async(e,t)=>{e.remoteSdp=t,this.cfg.autoAcceptVideoUpgrade?.enabled?await this.acceptRemoteVideoUpgrade(e.callId):this.onRemoteVideoUpgradeRequest(e.callId)});n(this,"csshVideoDownGrade",async(e,t)=>{let i=e.webRtcObj,s=await i.createAnswerForDowngradeToAudio(t);await this.sendCallUpdate(e.callId,s),this.onLocalStream(e.callId,i.getOutgoingMediaStream(),!1),this.onRemoteStream(e.callId,i.getIncomingMediaStream(),!1),this.onRemoteVideoDropped(e.callId)});n(this,"csshCallStatus",async(e,t,i,s)=>{if(this.onReceivedCallStatus(e.callId,s),!t&&s===200)return this.onReceivedCallActive(e.callId),Promise.resolve(!1);if(t&&i){let r=e.webRtcObj,o=r.getCurrentVideoDirection(),l=r.getSdpVideoDirection(t);if(o!==l){let d=await r.processVideoChangedSdp(t,!i,l);return await this.sendCallUpdate(e.callId,d),r.getHasIncomingVideo()&&this.onRemoteVideoReceived(e.callId),Promise.resolve(!0)}}return Promise.resolve(!1)});n(this,"csshProceeding",async(e,t,i)=>{if(!t)return Promise.resolve();let s=e.webRtcObj;t.includes("m=video 0")&&(this.onCallDowngradedToAudio(e.callId),await s.createOfferToRemoveVideo());let r=!i,o=await s.processProgressSdp(t,r);if(!r){let l=await this.sendCallProceeding(e.callId,o);if(!l.ok)return Promise.reject(l)}});n(this,"csshConnectedOrInProgress",async(e,t,i,s)=>{if(t){let r=e.webRtcObj,o=!i,l=await r.processProgressSdp(t,o);if(i&&l){let d=await this.sendCallConnected(e.callId,l);if(!d.ok)return Promise.reject(c("Failed to set Connected state",d.status));s===200&&this.onReceivedCallActive(e.callId)}}});this.logger=new b("DAAS_CALL_API"),this.pubsub=new U(this.logger),this.signaler={onCallDowngradedToAudio:e=>this.onCallDowngradedToAudio(e),onLocalStream:(e,t,i)=>this.onLocalStream(e,t,i),onReceivedCallEnded:e=>this.onReceivedCallEnded(e),onReceivedCallFailed:(e,t)=>this.onReceivedCallFailed(e,t),onRemoteStream:(e,t,i)=>this.onRemoteStream(e,t,i)}}},R=A;n(R,"instance"),n(R,"getInstance",()=>(A.instance||(A.instance=new A),A.instance));var O=class{constructor(e,t,i,s,r,o,l,d,g,p,h,m=!1,w){n(this,"callerId");n(this,"callManager");n(this,"camera");n(this,"cfg");n(this,"daasCallingApis");n(this,"direction");n(this,"id");n(this,"callMedias");n(this,"isConferenceCall");n(this,"isRingTonePlaying");n(this,"listeners",[]);n(this,"localLine");n(this,"logger");n(this,"maxCallResponseWaitTimer");n(this,"microphone");n(this,"networkCallId");n(this,"origTime");n(this,"relatedSessionId");n(this,"remoteAudioElement");n(this,"remoteLine");n(this,"serverCorrelator");n(this,"speakers");n(this,"state");n(this,"toneHelper");n(this,"getId",()=>this.id);n(this,"getNetworkCallId",()=>this.networkCallId);n(this,"getState",()=>this.state);n(this,"getDirection",()=>this.direction);n(this,"getCallerId",()=>this.callerId);n(this,"start",()=>{if(this.state!=="new"||this.direction!=="outgoing"){let i="Only a new && outgoing call can be started";return this.logger.error(i),Promise.reject(new Error(i))}let e=!1;this.logger.log(`call start isVideo:(${e})`);let t=this.getDeviceList();return this.logger.log("deviceList",t),Y(this.remoteLine)?Promise.reject("Emergency Calls Not Supported"):this.daasCallingApis.startCall(this.remoteLine,e,this.networkCallId,this.localLine?Z(S(this.localLine),"+"):void 0,this.relatedSessionId,this.callerId,t).then(i=>{this.networkCallId=i}).catch(i=>(this.logger.error(`Unable to make call: ${i.message}`),Promise.reject(i)))});n(this,"isConference",()=>this.isConferenceCall);n(this,"isIncoming",()=>this.direction==="incoming");n(this,"isOutgoing",()=>this.direction==="outgoing");n(this,"hasAudio",()=>this.hasMedia("incoming","audio"));n(this,"getMediaStream",(e,t)=>{let i=this.getCallSession(),s;if(e==="LOCAL"?s=i.webRtcObj.getOutgoingMediaStream():s=i.webRtcObj.getIncomingMediaStream(),(t==="audio"?s.getAudioTracks():s.getVideoTracks()).length>0)return s});n(this,"isMediaStreamAvailable",(e,t)=>!!this.getMediaStream(e,t));n(this,"getRemoteLine",()=>this.remoteLine);n(this,"setRemoteLine",e=>{e&&(this.remoteLine=S(e))});n(this,"getLocalLine",()=>this.localLine);n(this,"getSpeakers",()=>this.speakers);n(this,"getMicrophone",()=>this.microphone);n(this,"answer",(e=!1,t=!1)=>(this.maxCallResponseWaitTimer&&(window.clearTimeout(this.maxCallResponseWaitTimer),this.maxCallResponseWaitTimer=void 0),this.updateState("connected"),this.daasCallingApis.acceptCall(this.networkCallId,this.getDeviceList(),e,t)));n(this,"end",()=>(this.logger.log("end call"),this.endCall(!1,!0)));n(this,"hold",()=>this.daasCallingApis.holdCall(this.networkCallId).then(()=>{this.state==="held_remotely"?this.updateState("held_both"):this.state==="connected"&&this.updateState("held_locally")}));n(this,"resume",()=>this.daasCallingApis.resumeCall(this.networkCallId).then(()=>{this.state==="held_both"?this.updateState("held_remotely"):this.state==="held_locally"&&this.updateState("connected")}));n(this,"mute",()=>this.daasCallingApis.muteCall(this.networkCallId));n(this,"unmute",()=>this.daasCallingApis.unmuteCall(this.networkCallId));n(this,"isMuted",()=>this.daasCallingApis.isCallMuted(this.networkCallId));n(this,"sendDTMF",async e=>{let t=this.daasCallingApis.sendDtmfCodes(this.networkCallId,e,this.playDtmfTone);return t.ok?Promise.resolve():(this.logger.warn("Error trying to send DTMF Codes: ",t.status),Promise.reject(t))});n(this,"addCallListener",e=>{this.listeners.push(e)});n(this,"failureStatusReceived",e=>this.callHasEnded()?Promise.resolve():(this.logger.warn(`Call failed: ${e}`),this.endCall(!0,!1)));n(this,"callStatusChanged",e=>{if(this.callHasEnded()){this.logger.log("callStatusChanged: Call has already ended.  Will not process status change");return}switch(this.logger.log(`callStatusChanged got statusChanged: ${e}, processing`),String(e)){case"180":case"183":["new"].includes(this.state)?(this.updateState("inprogress"),this.direction==="outgoing"&&this.startRingback().catch(f)):this.logger.log("Call already in the inprogress state.  Ignoring status change.");break;case"200":this.updateState("connected");break;default:this.logger.error("Unhandled callStatusChanged:",e)}});n(this,"getServerCorrelator",()=>this.serverCorrelator);n(this,"startRingback",()=>(this.logger.log("startRingback"),this.toneHelper.startTone("ringback",this.callManager.getRingbackToneURL(),this.callManager.getRingToneSpeakers(),this.callManager.getRingbackToneVolume()).catch(e=>{let t=`startTone in startRingback rejected with ${e}`;return this.logger.warn(t),Promise.resolve()})));n(this,"stopRingback",()=>(this.logger.log("stopRingback"),this.toneHelper.stopTone("ringback")));n(this,"startRingtone",()=>(this.logger.log("startRingtone"),this.isRingTonePlaying||!["new","inprogress"].includes(this.state)?Promise.resolve():this.toneHelper.startTone("ringtone",this.callManager.getRingToneURL(),this.callManager.getRingToneSpeakers(),this.callManager.getRingbackToneVolume()).then(()=>{this.isRingTonePlaying=!0}).catch(e=>{let t=`startTone in startRingtone rejected with ${e}`;return this.logger.warn(t),Promise.resolve()})));n(this,"stopRingtone",()=>{this.logger.log("stopRingtone"),this.toneHelper.stopTone("ringtone"),this.isRingTonePlaying=!1});n(this,"receivedCallActive",e=>{this.isOutgoing()&&(this.serverCorrelator=e||""),this.updateState("connected")});n(this,"onLocalStream",(e,t)=>{this.logger.log("onReceivedLocalStream:",e,t);for(let r of this.listeners)u(r.onLocalStream)&&setTimeout(()=>r.onLocalStream(this,e,t),1);let i=this.hasMedia("outgoing","video"),s={direction:"outgoing",mediaType:"video"};if(t&&!i){this.addMedia(s);for(let r of this.listeners)u(r.onMediaAdded)&&setTimeout(()=>r.onMediaAdded(this,s),1)}else if(!t&&i){this.removeMedia(s);for(let r of this.listeners)u(r.onMediaRemoved)&&setTimeout(()=>r.onMediaRemoved(this,s),1)}});n(this,"onRemoteStream",(e,t)=>{this.logger.log("onReceivedRemoteStream:",e,t),this.remoteAudioElement.srcObject=e;let i=e.getAudioTracks();i.length?i.forEach(o=>o.enabled=!0):this.logger.warn("Remote stream has no audio tracks"),this.notifyListeners(o=>{u(o.onRemoteStream)&&setTimeout(()=>o.onRemoteStream(this,e,t),1)});let s=this.hasMedia("incoming","video"),r={direction:"incoming",mediaType:"video"};if(t&&!s){this.addMedia(r);for(let o of this.listeners)u(o.onMediaAdded)&&setTimeout(()=>o.onMediaAdded(this,r),1)}else if(!t&&s){this.removeMedia(r);for(let o of this.listeners)u(o.onMediaRemoved)&&setTimeout(()=>o.onMediaRemoved(this,r),1)}});n(this,"reconnectCall",()=>this.daasCallingApis.reconnectCall(this.networkCallId));n(this,"callRejectedRemotely",()=>this.callEndedRemotely());n(this,"callEndedRemotely",()=>this.callHasEnded()?Promise.resolve():(this.logger.info("Other Party Ended the Call"),this.endCall(!1,!1)));n(this,"receivedCallHold",()=>{this.state==="held_locally"?this.updateState("held_both"):this.state==="connected"&&this.updateState("held_remotely")});n(this,"receivedCallResume",()=>{this.state==="held_both"?this.updateState("held_locally"):this.state==="held_remotely"&&this.updateState("connected")});n(this,"mediaRemovedRemotely",e=>{let t={direction:"incoming",mediaType:e};this.removeMedia(t),this.notifyListeners(i=>{u(i.onMediaRemoved)&&window.setTimeout(()=>i.onMediaRemoved(this,t),0)})});n(this,"mediaAddedRemotely",e=>{let t={direction:"incoming",mediaType:e};this.addMedia(t),this.notifyListeners(i=>{u(i.onMediaRemoved)&&window.setTimeout(()=>i.onMediaAdded(this,t),0)})});n(this,"transferStatusChanged",e=>{this.notifyListeners(t=>{u(t.onTransferStatusChanged)&&window.setTimeout(()=>t.onTransferStatusChanged(this,e),1)})});n(this,"getAudioElements",()=>this.toneHelper.audioElements);n(this,"getRTCPeerConnection",()=>{let e=this.getCallSession();if(!!e)return e.webRtcObj.getPeerConnection()});n(this,"ignoreCall",()=>{this.getNetworkCallId()&&this.updateState("ignore")});n(this,"setMicrophone",e=>this.getDeviceById("audioinput",e).then(t=>{this.microphone=t;let i=this.isMuted();return this.updateMediaDevice("audioinput",e).then(()=>(this.logger.log(`Updated Audio Input to use Microphone: ${t.label}`),i?this.mute():Promise.resolve()))}).catch(t=>{let i="setMicrophone: Error occurred";return this.logger.error(i,t),Promise.reject(i)}));n(this,"setSpeakers",e=>this.getDeviceById("audiooutput",e).then(t=>{this.speakers=t;let i=this.remoteAudioElement.setSinkId;if(u(i))return i(e).then(()=>{this.logger.log(`Updated Audio Output to use Speakers: ${t.label}`)});{let s="setSinkId not defined on audioElement";return this.logger.warn(s),Promise.reject(s)}}).catch(t=>{let i="setSpeakers: Error occurred";return this.logger.error(i,t),Promise.reject(i)}));n(this,"getSpeakerVolume",()=>this.remoteAudioElement.volume*x);n(this,"setSpeakerVolume",e=>{e<z?e=z:e>x&&(e=x),this.remoteAudioElement.volume=e/x});n(this,"getAvailableAudioDevices",()=>navigator.mediaDevices.enumerateDevices().then(e=>e.filter(t=>t.kind==="audiooutput")).then(e=>{let t=[],i,s;for(let r of e)r.deviceId==="default"&&(i=r.groupId),this.speakers&&this.speakers.deviceId===r.deviceId&&(s=r.groupId),r.deviceId!=="default"&&!t.find(o=>o.groupId===r.groupId)&&t.push({groupId:r.groupId,label:r.label,isCurrentSelection:!1});for(let r of t)if(s){if(r.groupId===s){r.isCurrentSelection=!0;break}}else if(r.groupId===i){r.isCurrentSelection=!0;break}return t}));n(this,"updateAudioPairByGroupId",e=>navigator.mediaDevices.enumerateDevices().then(t=>t.filter(i=>i.deviceId!=="default")).then(t=>{let i=t.find(o=>o.groupId===e&&o.kind==="audioinput"),s;i?s=this.setMicrophone(i.deviceId):s=this.getCurrentDefaultMicrophone().then(o=>(this.logger.log("Selected audio devices does not include a microphone.  Using current system default microphone: ",o.label),this.setMicrophone(o.deviceId))),i=t.find(o=>o.groupId===e&&o.kind==="audiooutput");let r;return i&&(r=this.setSpeakers(i.deviceId)),Promise.all([s,r]).then(()=>Promise.resolve())}).catch(t=>(this.logger.error("updateAudioPairByGroupId error updating audio devices: ",t),Promise.reject(t))));n(this,"isOnHold",()=>["held_both","held_remotely","held_locally"].includes(this.getState()));n(this,"getHoldState",()=>this.isOnHold()?this.getState():"");n(this,"isConnected",()=>["connected"].includes(this.getState()));n(this,"revive",()=>this.daasCallingApis.reconnectCall(this.networkCallId));n(this,"getCallStartTime",()=>this.origTime);n(this,"playDtmfTone",async e=>{if(!e)return;let t=e.charAt(0),s={"*":"pound.ogg","#":"asterisk.ogg",0:"0.ogg",1:"1.ogg",2:"2.ogg",3:"3.ogg",4:"4.ogg",5:"5.ogg",6:"6.ogg",7:"7.ogg",8:"8.ogg",9:"9.ogg"}[t];if(!s){t===","?this.logger.log("playDtmfTone comma delay"):this.logger.warn("playDtmfTone invalid dtmf digit: ",e);return}this.logger.log("playDtmfTone playing DTMF digit: ",e);let r=`${this.cfg.dtmfFolderURLPrefix}/${s}`,o=this.isMuted();o||await this.mute().catch(f),await this.toneHelper.startTone(`dtmf-${t}`,r,this.speakers&&this.speakers.deviceId||"default",this.callManager.getRingToneVolume(),!1,()=>{o||this.unmute().catch(f)}).catch(l=>(this.logger.warn("Could not play DTMF audio tone: ",e,l),o||this.unmute().catch(f),Promise.resolve()))});this.daasCallingApis=R.getInstance(),this.callManager=p,this.callerId=g,this.relatedSessionId=l,this.remoteLine=S(o),this.localLine=S(r),this.callMedias=s,this.direction=i,this.networkCallId=t,this.id=e,this.isConferenceCall=m,this.serverCorrelator=w,this.cfg=h,this.logger=new b("MW-CALL"),this.toneHelper=new M(this.logger),this.updateState("new"),this.origTime=Date.now(),this.maxCallResponseWaitTimer=window.setTimeout(()=>{this.logger.log(`Terminating ${this.direction} call due to time-out waiting for user action or network response`),this.end().catch(f)},35*1e3),this.remoteAudioElement=new Audio,this.remoteAudioElement.autoplay=!0,this.remoteAudioElement.volume=1,this.isRingTonePlaying=!1,this.initializeDevices().then(()=>{let v=this.remoteAudioElement.setSinkId;u(v)?v(this.speakers.deviceId).catch(f):this.logger.error("setSinkId not defined on audioElement")}).catch(f)}async endCall(e,t){if(this.logger.info("End call"),this.callHasEnded())return Promise.reject("Not an active call");this.updateState(e?"failed":"disconnected"),await this.daasCallingApis.endCall(this.networkCallId,t).catch(i=>{this.logger.log("endCall error: ",i)})}updateState(e){let t=this.state;if(["disconnected","failed",e].includes(t)){this.logger.log("updateState already in disconnected or failed");return}if(t===void 0&&e==="new"&&(this.origTime=Date.now()),t==="new"&&e==="inprogress"){let i=(Date.now()-this.origTime)/1e3;this.logger.log(`Call origination duration', ${i}`),this.origTime=0}this.logger.log(`updateState changed from ${this.state} to ${e}`),this.state=e,["connected","disconnected","failed","ignore"].includes(this.state)&&(this.direction==="incoming"?this.stopRingtone():this.stopRingback(),this.maxCallResponseWaitTimer&&(window.clearTimeout(this.maxCallResponseWaitTimer),this.maxCallResponseWaitTimer=void 0)),this.notifyListeners(i=>i.onCallStateChanged(this,t))}notifyListeners(e){this.listeners.forEach(t=>{try{e(t)}catch(i){let s=`While notifying listener ${i}`;this.logger.error(s)}})}getDeviceById(e,t){return navigator.mediaDevices.enumerateDevices().then(i=>i.filter(s=>s.kind===e&&s.deviceId===t)).then(i=>i[0]).catch(i=>Promise.reject(i))}getCallSession(){let e=this.daasCallingApis.getCallSession(this.id);return e||(e=this.daasCallingApis.getCallSession(this.networkCallId)),e}callHasEnded(){return["disconnected","failed"].includes(this.state)}getCurrentDefaultMicrophone(){return navigator.mediaDevices.enumerateDevices().then(e=>e.filter(t=>t.kind==="audioinput"&&t.deviceId==="default")).then(e=>e[0])}getDeviceList(){let e=[];return this.camera&&e.push({deviceId:this.camera.deviceId,groupId:this.camera.groupId,kind:this.camera.kind,label:this.camera.label}),this.microphone&&e.push({deviceId:this.microphone.deviceId,groupId:this.microphone.groupId,kind:this.microphone.kind,label:this.microphone.label}),this.speakers&&e.push({deviceId:this.speakers.deviceId,groupId:this.speakers.groupId,kind:this.speakers.kind,label:this.speakers.label}),e.length<1&&(e=void 0),e}initializeDevices(){return navigator.mediaDevices.enumerateDevices().then(e=>{this.microphone=e.filter(i=>i.kind==="audioinput"&&i.deviceId==="default")[0],this.speakers=e.filter(i=>i.kind==="audiooutput"&&i.deviceId==="default")[0];let t=e.filter(i=>i.kind==="videoinput");if(t.length){let i=t.filter(s=>s.deviceId==="default");if(i.length)this.camera=i[0];else{let s=t.filter(r=>r.label.includes("built-in"));s.length?this.camera=s[0]:this.camera=t[0]}}}).catch(e=>{this.logger.error("Error setting meeting default audio devices: ",e)})}updateMediaDevice(e,t){return this.daasCallingApis.updateMediaDevice(this.networkCallId,e,t)}hasMedia(e,t){return!!this.callMedias.find(i=>i.direction===e&&i.mediaType===t)}addMedia(e){this.hasMedia(e.direction,e.mediaType)||this.callMedias.push(e)}removeMedia(e){this.hasMedia(e.direction,e.mediaType)&&(this.callMedias=this.callMedias.filter(t=>t.direction!==e.direction||t.mediaType!==e.mediaType))}};var te="CPaaS Virtual Phone",k=class{constructor(){n(this,"calls",[]);n(this,"cfg");n(this,"daasCallingApis");n(this,"isServiceInitialized",!1);n(this,"listeners",[]);n(this,"logger");n(this,"regManager");n(this,"toneHelper");n(this,"ringbackToneVolume",.5);n(this,"ringToneVolume",.5);n(this,"initialize",(e,t)=>{if(t.getVersion()!==E){let l="CallManager and CoreSDK are not the same version";return this.logger.error(l),Promise.reject(new Error(l))}let s=t.getCpaasServiceAccessors(),r=t.getRegistrationManager(),o=t.getWebSocketEventsMgr();return this.daasCallingApis=R.getInstance(),this.daasCallingApis.initialize(e,s,o),this.cfg=e,this.toneHelper=new M(this.logger),this.regManager=r,this.registerCallbacks(),this.isServiceInitialized=!0,Promise.resolve(this)});n(this,"clearData",()=>Promise.resolve());n(this,"isInitialized",()=>this.isServiceInitialized);n(this,"logoutCleanup",async()=>{await this.endAllCalls(99),this.isServiceInitialized=!1,this.cfg=void 0});n(this,"addCallManagerListener",e=>{e&&this.listeners.push(e)});n(this,"getCallById",e=>{let t=this.calls.find(i=>i.getNetworkCallId()===e);return t||(t=this.calls.find(i=>i.getId()===e)),t});n(this,"getCalls",e=>{let t=I.fromConfig(e);return this.calls.filter(i=>t.filter(i))});n(this,"getAllCalls",()=>this.calls);n(this,"getConnectedCalls",()=>this.getCalls({state:"connected"}));n(this,"createOutgoingCall",(e,t,i,s,r,o)=>{let l=this.getRegisteredCallLines(),d=t?y(S(t)):l[0],g=y(S(e));if(t&&!l.includes(d))throw new Error("Local number must be one of the currently registered lines");let p=[{direction:"outgoing",mediaType:"audio"}];i&&p.push({direction:"outgoing",mediaType:"video"}),this.logger.log(`createOutgoingCall from ${d} to ${g}`);let h=V(),m=new O(h,h,"outgoing",p,d,g,s,r,te,this,this.cfg,o);m.addCallListener(this.callsListener);for(let w of this.listeners)u(w.onCallStateChanged)&&setTimeout(()=>w.onCallStateChanged(m,void 0),1);return this.logger.log("Call created: ",m),this.calls.push(m),m});n(this,"startNewCall",async(e,t,i)=>{try{let s=this.createOutgoingCall(e,t,i);return await s.start(),Promise.resolve(s)}catch(s){return this.logger.warn("startNewCall error",s),Promise.reject(s)}});n(this,"endAllCalls",e=>{let t=this.getAllCalls();if(t&&t.length>0){this.logger.log("Drop active calls.  Code: ",e);let i=t.map(s=>{let r=s.getState();["disconnected","failed"].includes(r)||(this.logger.log("Dropping call ",s.getId()),Number.isInteger(e)&&e===99?s.failureStatusReceived(e):s.end())});return Promise.all(i).then(()=>Promise.resolve())}return Promise.resolve()});n(this,"reviveAllCalls",()=>{let e=this.getAllCalls();e&&e.length>0&&(this.logger.log("Attempting to Revive calls after loss of network connectivity"),e.forEach(t=>{let i=t.getState();["disconnected","failed"].includes(i)||(this.logger.log("Attempting to Revive call:",t.getId()),t.revive().catch(f))}))});n(this,"getRingbackToneURL",()=>this.cfg.ringbackToneURL);n(this,"getRingbackToneVolume",()=>this.ringbackToneVolume);n(this,"setRingbackToneVolume",e=>{this.ringbackToneVolume=Math.max(0,Math.min(100,e))/100});n(this,"getRingbackToneSpeakers",()=>{});n(this,"getRingToneURL",()=>this.cfg.ringToneURL);n(this,"getRingToneVolume",()=>this.ringToneVolume);n(this,"setRingToneVolume",e=>{this.ringToneVolume=Math.max(0,Math.min(100,e))/100});n(this,"getRingToneSpeakers",()=>{});n(this,"getMicrophoneDevice",()=>{});n(this,"getMicrophoneVolume",()=>1);n(this,"playDialPadKeyTone",e=>{if(e.length===1&&["0","1","2","3","4","5","6","7","8","9","*","#"].includes(e)){let t=`${this.cfg.dtmfFolderURLPrefix}/${ee(e)}.ogg`;return this.toneHelper.startTone(`dtmf-${e}`,t,"default",this.getRingToneVolume(),!1)}return Promise.reject(new Error("input is not a single DTMF digit character"))});n(this,"callsListener",{onCallStateChanged:(e,t)=>{if(["disconnected","failed"].includes(e.getState())){let i=this.calls.findIndex(s=>s.getId()===e.getId());if(i<0)return;this.calls.splice(i,1)}this.logger.log("CallServiceImpl onCallStateChanged: ",this.listeners,t,e.getState());for(let i of this.listeners)u(i.onCallStateChanged)&&setTimeout(()=>i.onCallStateChanged(e,t),1)},onLocalStream:(e,t,i)=>{for(let s of this.listeners)u(s.onLocalStream)&&setTimeout(()=>s.onLocalStream(e,t,i),1)},onRemoteStream:(e,t,i)=>{for(let s of this.listeners)u(s.onRemoteStream)&&setTimeout(()=>s.onRemoteStream(e,t,i),1)},onMediaAdded:(e,t)=>{this.listeners.forEach(i=>{u(i.onMediaAdded)&&setTimeout(()=>i.onMediaAdded(e,t),1)})},onMediaRemoved:(e,t)=>{this.listeners.forEach(i=>{u(i.onMediaRemoved)&&setTimeout(()=>i.onMediaRemoved(e,t),1)})},onTransferStatusChanged:(e,t)=>{this.listeners.forEach(i=>{u(i.onTransferStatusChanged)&&setTimeout(()=>i.onTransferStatusChanged(e,t),1)})},onTransferDetails:(e,t,i)=>{this.listeners.forEach(s=>{u(s.onTransferDetails)&&setTimeout(()=>s.onTransferDetails(e,t,i),1)})}});n(this,"networkConnectionEventListener",e=>{if(e?.networkState!=="onLine"){let t=this.getAllCalls();for(let i of t)["new","inprogress","ringing"].includes(i.getState())&&(i.end().catch(f),this.logger.log("Terminated call ",i.getNetworkCallId()," due to loss of network connection"))}});n(this,"withCallByNetworkId",(e,t)=>{let i=this.getCallById(e);return i&&u(t)?(t(i),!0):(this.logger.log(`Couldn't find call for networkCallId: ${e} or callback function not defined`),!1)});n(this,"onReceivedCallFailed",(e,t)=>{this.withCallByNetworkId(e,i=>{this.logger.warn(`got wrgOnReceivedCallFailed for ${i.getDirection()}/${i.getId()}/${i.getNetworkCallId()}, code:${t}`),i.failureStatusReceived(t).catch(f)})});n(this,"onReceivedCallStatus",(e,t)=>{this.withCallByNetworkId(e,i=>{this.logger.log(`got onReceivedCallStatus for ${i.getDirection()}/${i.getId()}/${i.getNetworkCallId()}, code:${t}`),i.callStatusChanged(t)})});n(this,"onReceivedCallRejected",e=>{this.withCallByNetworkId(e,t=>{this.logger.log(`got onReceivedCallRejected for ${t.getDirection()}/${t.getId()}/${t.getNetworkCallId()}`),t.callRejectedRemotely().catch(f)})});n(this,"onReceivedCallEnd",e=>{this.withCallByNetworkId(e,t=>{this.logger.log(`got onReceivedCallEnd for ${t.getDirection()}/${t.getId()}/${t.getNetworkCallId()}`),t.callEndedRemotely().catch(f)})});n(this,"onReceivedCallHold",e=>{this.withCallByNetworkId(e,t=>{this.logger.log(`got onReceivedCallHold for ${t.getDirection()}/${t.getId()}/${t.getNetworkCallId()}`),t.receivedCallHold()})});n(this,"onReceivedCallResume",e=>{this.withCallByNetworkId(e,t=>{this.logger.log(`got onReceivedCallResume for ${t.getDirection()}/${t.getId()}/${t.getNetworkCallId()}`),t.receivedCallResume()})});n(this,"onReceivedCallActive",(e,t)=>{this.withCallByNetworkId(e,i=>{i.receivedCallActive(t)})});n(this,"onLocalStream",(e,t,i)=>{this.withCallByNetworkId(e,s=>{this.logger.log(`got onReceivedLocalStream for ${s.getId()}/${s.getNetworkCallId()} hasVideo=${i}`),s.onLocalStream(t,i)})});n(this,"onRemoteStream",(e,t,i)=>{this.withCallByNetworkId(e,s=>{this.logger.log(`got onReceivedRemoteStream for ${s.getId()}/${s.getNetworkCallId()} hasVideo=${i}`),s.onRemoteStream(t,i)})});n(this,"onReceivedNewCall",(e,t,i,s,r,o,l,d)=>{if(this.regManager.getConnectionState()!=="connected"){this.logger.warn("Received New Call outside of Registration Connected state");return}i||(i=t);let g=decodeURIComponent(i.toLocaleLowerCase());i.includes("@")&&(g=g.split("@")[0]),g=j(g);let p=S(s),h=d?[{direction:"incoming",mediaType:"audio"},{direction:"incoming",mediaType:"video"}]:[{direction:"incoming",mediaType:"audio"}],m=new O(e,e,"incoming",h,p,t,l,void 0,g,this,this.cfg,!1,o),w=d?"video":"audio";this.logger.log(`New incoming ${w} call: `,m),m.addCallListener(this.callsListener),this.calls.push(m),this.listeners.forEach(v=>{u(v.onIncomingCall)&&window.setTimeout(()=>v.onIncomingCall(m),1)})});n(this,"onTransferTargetDetails",(e,t)=>{if(!(!e||!t)&&["Connected","Resume"].includes(t.status)){let i=t.transferTargetAddress;i&&(i=i.replace("sip:",""));let s=t.transferTargetName;(!s||s.toLowerCase()===decodeURIComponent(te.toLowerCase()))&&(s=""),this.withCallByNetworkId(e,r=>{this.logger.log(`\r
got onTransferTargetDetails for ${r.getDirection()}/${r.getId()}/${i}/${s}`),this.listeners.forEach(o=>{u(o.onTransferDetails)&&o.onTransferDetails(r,i,s)})})}});let e=D.getInstance(),t=3;e.setLogLevel(t),this.logger=new b("CALL-MGR"),this.logger.log("CallManager constructor")}registerCallbacks(){this.regManager.addRegManagerListener({onNetworkConnection:this.networkConnectionEventListener}),this.daasCallingApis.subscribe("OnLocalStream",this.onLocalStream,"call-service"),this.daasCallingApis.subscribe("OnReceivedCallActive",this.onReceivedCallActive,"call-service"),this.daasCallingApis.subscribe("OnReceivedCallEnded",this.onReceivedCallEnd,"call-service"),this.daasCallingApis.subscribe("OnReceivedCallFailed",this.onReceivedCallFailed,"call-service"),this.daasCallingApis.subscribe("OnReceivedCallHold",this.onReceivedCallHold,"call-service"),this.daasCallingApis.subscribe("OnReceivedCallRejected",this.onReceivedCallRejected,"call-service"),this.daasCallingApis.subscribe("OnReceivedCallResume",this.onReceivedCallResume,"call-service"),this.daasCallingApis.subscribe("OnReceivedCallStatus",this.onReceivedCallStatus,"call-service"),this.daasCallingApis.subscribe("OnReceivedNewCall",this.onReceivedNewCall,"call-service"),this.daasCallingApis.subscribe("OnRemoteStream",this.onRemoteStream,"call-service"),this.daasCallingApis.subscribe("OnTransferTargetDetails",this.onTransferTargetDetails,"call-service")}getRegisteredCallLines(){return this.regManager.getRegisteredMsisdns()}},P=k;n(P,"instance"),n(P,"getInstance",()=>(k.instance||(k.instance=new k),k.instance));var L=class{constructor(){n(this,"getCallManager",()=>P.getInstance());n(this,"getVersion",()=>E)}},W=L;n(W,"instance"),n(W,"getInstance",()=>(L.instance||(L.instance=new L),L.instance));export{O as Call,I as CallFilter,P as CallManager,W as CallingSDK,F as Device};
/*! Copyright (c) 2023 T-Mobile USA */
